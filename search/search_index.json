{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#traceroute-problem","title":"Traceroute Problem","text":"<p>Almost every OS is packaged with the famous <code>traceroute</code> utility to check the routing over IP networks. But what to do if you need to embed the probe just into your Python application? Running a system's <code>traceroute</code> is rarely an option. System's <code>traceroute</code> output formats may vary from system to system and maintaining the application quickly became a road to hell. Embedding a traceroute into your application may be a better choice.</p> <p>Despite the apparent simplicity, it is not a trivial task. To implement the traceroute you have to master a system-dependent Raw Sockets magic. There are many pitfalls. To make things worse, when using hosts generating and receiving large volumes of ICMP traffic, the application may become very resource-hungry.</p>"},{"location":"#gufo-traceroute","title":"Gufo Traceroute","text":"<p>Gufo Traceroute is the Python asyncio library for IPv4 traceroute. It provides a clean Python API which hides all raw-socket manipulation details.</p> <pre><code>async with Traceroute() as tr:\n    async for hop in tr.traceroute(\"8.8.8.8\", tries=3):\n        print(hop)\n</code></pre> <p>Unlike the others traceroute implementations, Gufo Traceroute works well in noisy environments.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Clean async API.</li> <li>IPv4 support.</li> <li>Built-in whois client for AS number resolution.</li> <li>High-performance.</li> <li>Full Python typing support.</li> <li>Editor completion.</li> <li>Well-tested, battle-proven code.</li> </ul>"},{"location":"#on-gufo-stack","title":"On Gufo Stack","text":"<p>This product is a part of Gufo Stack - the collaborative effort  led by Gufo Labs. Our goal is to create a robust and flexible  set of tools to create network management software and automate  routine administration tasks.</p> <p>To do this, we extract the key technologies that have proven themselves  in the NOC and bring them as separate packages. Then we work on API, performance tuning, documentation, and testing. The NOC uses the final result as the external dependencies.</p> <p>Gufo Stack makes the NOC better, and this is our primary task. But other products can benefit from Gufo Stack too. So we believe that our effort will make  the other network management products better.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p> <p>To see unreleased changes, please see the CHANGELOG on the master branch guide.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#security","title":"Security","text":"<ul> <li>Use python:3.13-slim-trixie as base for devcontainer.</li> <li>Install security updates during devcontainer build.</li> </ul>"},{"location":"CHANGELOG/#infrastructure","title":"Infrastructure","text":"<ul> <li>Codecov integration.</li> </ul>"},{"location":"CHANGELOG/#022-2025-08-25","title":"0.2.2 - 2025-08-25","text":""},{"location":"CHANGELOG/#infrastructure_1","title":"Infrastructure","text":"<ul> <li>Move requirements to pyproject.toml</li> <li>IPython 8.4.0</li> <li>mypy 1.13.0</li> <li>ruff==0.11.2</li> <li>pytest==8.3.3</li> </ul>"},{"location":"CHANGELOG/#021-2025-03-28","title":"0.2.1 - 2025-03-28","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Python 3.12 and 3.13 support.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>docs: Fancy front page.</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Drop Python 3.8 support.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_2","title":"Infrastructure","text":"<ul> <li>Adopt Ruff.</li> <li>devcontainer: Move <code>settings</code> to the <code>customisations.vscode.settings</code></li> <li>mkdocs-material 9.2.3</li> <li>mypy 1.13.0</li> <li>Ruff 0.11.2</li> </ul>"},{"location":"CHANGELOG/#020-2022-12-15","title":"0.2.0 - 2022-12-15","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li><code>Hop.asn</code> field.</li> <li>Built-in whois client for autonomous system lookups.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_3","title":"Infrastructure","text":"<ul> <li>Switch to the <code>pypa/gh-action-pypi-publish@release/v1</code></li> </ul>"},{"location":"CHANGELOG/#011-2022-12-14","title":"0.1.1 - 2022-12-14","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li><code>min_ttl</code> parameter.</li> <li><code>src_port</code> parameter.</li> <li><code>src_addr</code> parameter.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_4","title":"Infrastructure","text":"<ul> <li>CI workflows tests</li> </ul>"},{"location":"CHANGELOG/#010-2022-12-11","title":"0.1.0 - 2022-12-11","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Initial implementation</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>Copyright \u00a9 2022-2025, Gufo Labs. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice,    this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.</li> <li>Neither the name of Gufo Labs nor the names of its contributors may be used    to endorse or promote products derived from this software without    specific prior written permission.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"faq/","title":"FAQ","text":"<p>What is \"Gufo\"?</p> <p>Gufo means the Owl in Italian.</p> <p>Why the owls?</p> <p>We love owls and the viable parts of our technologies were proven at the project, named \"the Owl\".</p> <p>What is \"Gufo Labs\"?</p> <p>Gufo Labs is the Milan-based company specialized on network and IT consulting, and on software research.</p> <p>What is \"Gufo Stack\"?</p> <p>We've extracted core components behind the NOC  and released them as independent packages, available under the terms  of the 3-clause BSD license. Our software shares common code quality standards  and is battle-proven under the high load. We hope our key components will help  the engineers and the developers to build reliable networks and robust network  management software.  See more for details.</p>"},{"location":"installation/","title":"Installation","text":"<p>Install with the pip</p> <pre><code>$ pip install gufo_traceroute\n</code></pre>"},{"location":"installation/#checking-the-installation","title":"Checking the Installation","text":"<p>To check the installation just import the module</p> <pre><code>from gufo.traceroute import traceroute\n</code></pre>"},{"location":"installation/#upgrading","title":"Upgrading","text":"<p>To upgrade existing Gufo Traceroute installation use pip</p> <pre><code>$ pip install --upgrade gufo_traceroute\n</code></pre>"},{"location":"installation/#uninstalling","title":"Uninstalling","text":"<p>To uninstall Gufo Traceroute use pip</p> <pre><code>$ pip uninstall gufo_traceroute\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>Python asyncio traceroute library.</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>Current version.</p>"},{"location":"reference/#gufo.traceroute.Hop","title":"<code>Hop</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Single hop information.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>Hop address.</p> required <code>rtt</code> <code>float</code> <p>Round-trip time in seconds.</p> required <code>asn</code> <code>int</code> <p>Autonoumous System number, if as resolution is enabled.</p> required"},{"location":"reference/#gufo.traceroute.HopInfo","title":"<code>HopInfo</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Path hop information.</p> <p>Parameters:</p> Name Type Description Default <code>ttl</code> <code>int</code> <p>Current TTL.</p> required <code>hops</code> <code>List[Optional[Hop]]</code> <p>List of hops. Items are either Hop or None in case of timeout.</p> required"},{"location":"reference/#gufo.traceroute.Traceroute","title":"<code>Traceroute</code>","text":"<p>               Bases: <code>object</code></p> <p>Asynchronous traceroute.</p> <p>Parameters:</p> Name Type Description Default <code>max_hops</code> <code>int</code> <p>Limit of the hops to trace.</p> <code>30</code> <code>src_addr</code> <code>Optional[str]</code> <p>Source address of the UDP packet. Detect automatically if not set.</p> <code>None</code> <code>src_port</code> <code>int</code> <p>Source port for UDP packet. <code>0</code> - get ephemeric port automatically.</p> <code>0</code> <code>dst_port</code> <code>int</code> <p>Destination UDP port.</p> <code>33434</code> <code>timeout</code> <code>float</code> <p>Hop timeout.</p> <code>1.0</code> <code>tos</code> <code>int</code> <p>DSCP/ToS mark for egress packets.</p> <code>0</code> <code>min_ttl</code> <code>int</code> <p>Minimum TTL to start with.</p> <code>1</code> <code>whois_addr</code> <code>str</code> <p>Whois server address or FQDN for authonomous system resolution.</p> <code>'whois.radb.net'</code> <code>whois_port</code> <code>int</code> <p>Whois server port.</p> <code>43</code> <code>resolve_as</code> <code>bool</code> <p>Fill Hop.asn with the hop's autonomuous system number.</p> <code>False</code> Note <p><code>resolve_as</code> option implies the requests to the external whois server. Requests may take additional time or may be blocked in closed environments.</p>"},{"location":"reference/#gufo.traceroute.Traceroute.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Asynchronous context manager entry.</p>"},{"location":"reference/#gufo.traceroute.Traceroute.__aexit__","title":"<code>__aexit__(exc_type, exc, traceback)</code>  <code>async</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/#gufo.traceroute.Traceroute.traceroute","title":"<code>traceroute(addr, tries=3, min_ttl=None)</code>  <code>async</code>","text":"<p>Perform traceroute to address.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>Destination address.</p> required <code>tries</code> <code>int</code> <p>Number of tries.</p> <code>3</code> <code>min_ttl</code> <code>Optional[int]</code> <p>Minimum TTL to start with.</p> <code>None</code> <p>Returns:</p> Type Description <code>AsyncIterable[HopInfo]</code> <p>Iterable of HopInfo.</p> Example <pre><code>async with Traceroute() as tr:\n    async for hop in tr.traceroute(\"127.0.0.1\"):\n        print(hop)\n</code></pre>"},{"location":"dev/","title":"Gufo Traceroute: Developer's Guide","text":"<p>This section is intended for Gufo Traceroute developers and for entities,  including both individuals and companies, interested in contributing to the project.</p> <ul> <li>Developer's Environment</li> <li>Building and Testing</li> <li>Common Tasks</li> <li>Code Quality</li> <li>Code Base</li> <li>Contributing Guide</li> <li>Code of Conduct</li> <li>Supported Standards</li> </ul>"},{"location":"dev/CODE_OF_CONDUCT/","title":"Gufo Stack Code of Conduct","text":"<p>Gufo Stack are the tools built by people for people. We aim to create a respectful, collaborative, and constructive community where everyone can contribute to building better software.</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-rule","title":"The Rule","text":"<p>\u201cAnd as you wish that others would do to you, do so to them.\u201d</p> <p>-- Luke 6:31</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-note","title":"The Note","text":"<p>This principle is universal. Similar wisdom can be found in many traditions:</p> <ul> <li>Confucius: \u201cDo not impose on others what you do not wish for yourself.\u201d (Analects 15:24)</li> <li>Prophet Muhammad (peace be upon him): \u201cNone of you [truly] believes until he loves for his brother what he loves for himself.\u201d (Hadith, Sahih Muslim 45:71)</li> </ul> <p>That\u2019s all.</p>"},{"location":"dev/CONTRIBUTING/","title":"Types of contributions","text":"<p>You can contribute to the Gufo Labs projects in several way. This repo is a place to discuss and collaborate on GitHub! Our team is maintaining this repo to preserve our bandwidth, off topic conversations will be closed.</p>"},{"location":"dev/CONTRIBUTING/#discussions","title":"Discussions","text":"<p>Discussions are where we have conversations.</p> <p>If you'd like help troubleshooting a PR you're working on, have a great new idea, or want to share something amazing you've learned in our docs, join us in discussions.</p>"},{"location":"dev/CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues are used to track tasks that contributors can help with. </p> <p>If you've found bug, or something in the content of the documentation that should be updated, search open issues to see if someone else has reported the same thing. If it's something new, open an issue. We'll use the issue to have a conversation about the problem you want to fix.</p>"},{"location":"dev/CONTRIBUTING/#pull-requests","title":"Pull requests","text":"<p>A pull request is a way to suggest changes in our repository.</p>"},{"location":"dev/codebase/","title":"Project's Code Base","text":"<p>The code base of the project has following structure:</p> <ul> <li><code>.devcontainer/</code> - Developer's container configuration for    VSCode Remote Containers. Just reopen   project in remote container to get ready-to-development   environment.</li> <li> <p><code>.github/</code> - GitHub settings</p> <ul> <li><code>workflows/</code> - GitHub Actions Workflows settings.   Used to run tests and build the documentation.</li> </ul> </li> <li> <p><code>docs/</code> - Mkdocs documentation.</p> </li> <li><code>examples/</code> - Project's examples.</li> <li><code>src/</code> - Project's source code.</li> <li><code>tests/</code> - Project's Pytest test suite.</li> <li><code>.gitignore</code> - Gitignore file.</li> <li><code>Dockerfile</code> - Dockerfile for development container.</li> <li><code>mkdocs.yml</code> - Mkdocs configuration file.</li> <li><code>pyproject.toml</code> - pyproject.toml file for python tools configuration.</li> <li><code>setup.cfg</code> - Python library setup configuration.</li> </ul>"},{"location":"dev/codequality/","title":"Code Quality Guide","text":"<p>We share the common code quality standards between all Gufo Labs projects.</p>"},{"location":"dev/codequality/#python-code-formatting","title":"Python Code Formatting","text":"<p>All Python code must be formatting using Ruff code formatter with settings defined in the project's <code>pyproject.toml</code> file.</p>"},{"location":"dev/codequality/#python-docstrings","title":"Python Docstrings","text":"<p>All Python functions and methods must be documenting using Google docstrings format.</p>"},{"location":"dev/codequality/#python-code-linting","title":"Python Code Linting","text":"<p>All Python code must pass Ruff tests with the project's settings.</p>"},{"location":"dev/codequality/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>All python code must pass Mypy type checks in the <code>strict</code> mode.</p>"},{"location":"dev/codequality/#test-suite-coverage","title":"Test Suite Coverage","text":"<p>The test suite must provide 100% code coverage whenever possible.</p>"},{"location":"dev/codequality/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Documentation must be clean and mean.</li> </ul>"},{"location":"dev/common/","title":"Developer's Common  Tasks","text":""},{"location":"dev/common/#bump-version","title":"Bump Version","text":"<ul> <li> Change <code>__version__</code> in <code>src/gufo/traceroute/__init__.py</code></li> <li> Add section in <code>CHANGELOG.md</code></li> </ul>"},{"location":"dev/environment/","title":"Developer's Environment","text":"<p>To participate in development you need to prepare the developer's environment first. Depending on the preferable tools, your mileage may vary.</p>"},{"location":"dev/environment/#visual-studio-code-dev-container","title":"Visual Studio Code Dev Container","text":"<p>The easiest way to start the development is to use Visual Studio Code with Remote Containers plugin. Just click on the green sign in the lower-left corner and select the \"Reopen in Container\" menu item. You'll get all the required formatting and linting settings out of the box.</p>"},{"location":"dev/standards/","title":"Supported Standards","text":"<p>Gufo Traceroute implements and is guided by the following standards:</p>"},{"location":"dev/standards/#ietf-rfc","title":"IETF RFC","text":"<ul> <li>RFC-792: Internet Control Message Protocol</li> <li>RFC-2474: Definition of the Differentiated   Services Field (DS Field) in the IPv4 and IPv6 Headers</li> <li>RFC-3912: WHOIS Protocol Specification</li> </ul>"},{"location":"dev/standards/#python-pep","title":"Python PEP","text":"<ul> <li>PEP8: Style Guide for Python Code</li> <li>PEP561: Distributing and Packaging Type Information</li> </ul>"},{"location":"dev/testing/","title":"Building and Testing","text":"<p>Before starting building and testing package set up  Developer's Environment first. From here and below we consider the shell's current directory matches the project's root directory.</p>"},{"location":"dev/testing/#building-package","title":"Building Package","text":"<p>To test the package build run:</p> <pre><code>$ python -m build --sdist --wheel\n</code></pre> <p>Compiled packages will be available in the <code>dist/</code> directory.</p>"},{"location":"dev/testing/#running-tests","title":"Running tests","text":"<p>To run the test suit:</p> <pre><code>$ pytest -vv\n</code></pre>"},{"location":"dev/testing/#running-lints","title":"Running Lints","text":"<p>All lints are checked as part of GitHub Actions Workflow. You may run lints manually before committing to the project.</p>"},{"location":"dev/testing/#check-formatting","title":"Check Formatting","text":"<p>Python Code Formatting is the mandatory requirement in our Code Quality standards. To check code formatting run:</p> <pre><code>$ ruff check examples/ src/ tests/\n</code></pre> <p>To fix formatting errors run: <pre><code>$ ruff format examples/ src/ tests/\n</code></pre></p> <p>We recommend setting python code formatting on file saving (Done in VS Code Dev Container out of the box).</p>"},{"location":"dev/testing/#python-code-lints","title":"Python Code Lints","text":"<p>Python Code Linting is the mandatory requirement in our Code Quality standards. To check code for linting errors run:</p> <pre><code>$ ruff examples/ src/ tests/\n</code></pre>"},{"location":"dev/testing/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>Python Code Static Checks is the mandatory requirement in our Code Quality standards. To check code for typing errors run:</p> <pre><code>$ mypy --strict src/\n</code></pre>"},{"location":"dev/testing/#python-test-code-coverage-check","title":"Python Test Code Coverage Check","text":"<p>To evaluate code coverage run tests:</p> <pre><code>$ coverage run -m pytest -vv\n</code></pre> <p>To report the coverage after the test run:</p> <pre><code>$ coverage report\n</code></pre> <p>To show line-by-line coverage:</p> <pre><code>$ coverage html\n</code></pre> <p>Then open <code>dist/coverage/index.html</code> file in your browser.</p>"},{"location":"dev/testing/#building-documentation","title":"Building Documentation","text":"<p>To rebuild and check documentation run</p> <pre><code>$ mkdocs serve\n</code></pre> <p>We recommend using Grammarly service to check documentation for common errors.</p>"},{"location":"examples/","title":"Gufo Traceroute Examples","text":"<p>This part of the documentation contains a detailed explanation of the samples from the <code>examples/</code> folder.</p> <ul> <li>traceroute.py: Simple traceroute script.</li> </ul>"},{"location":"examples/traceroute/","title":"Gufo Traceroute Examples: Traceroute Script","text":"<p>Let's write a simple traceroute script</p> <p>Warning</p> <p>Traceroute relies on raw sockets, which require additional privileges. This example must be run from the <code>root</code> user.</p> create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>The code is straightforward:</p> create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>We need <code>asyncio.run()</code> to run asynchronous code, so let's import the <code>asyncio</code>.</p> create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>Import the <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>The Traceroute object holds all necessary API, so let's import it from <code>gufo.traceroute</code>.</p> create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect an address to ping as the <code>addr</code> argument.</p> <p>create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> The Traceroute can be used as an instance or as an async context manager. So we use <code>async with</code> to create the context.</p> <p>create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> The traceroute() method starts the session as an asynchronous  yielding HopInfo objects per each TTL value. <code>tries</code> sets the number of probes defined per each host. In our case <code>info</code> will have exactly 3 items in <code>info.hops</code>, each either Hop structure, or <code>None</code> in case of timeout.</p> <p>create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> It is up to the application how to handle the  HopInfo. In our case we just print them to get the result like: <pre><code>...\nHopInfo(ttl=8, hops=[Hop(addr='62.101.124.1', rtt=0.003837245), Hop(addr='62.101.124.1', rtt=0.003250681), Hop(addr='62.101.124.1', rtt=0.0045064)])\nHopInfo(ttl=9, hops=[Hop(addr='209.85.168.64', rtt=0.00286636), Hop(addr='209.85.168.64', rtt=0.002871578), Hop(addr='209.85.168.64', rtt=0.002911354)])\nHopInfo(ttl=10, hops=[None, None, None])\nHopInfo(ttl=11, hops=[Hop(addr='8.8.8.8', rtt=0.003503296), Hop(addr='8.8.8.8', rtt=0.002676708), Hop(addr='8.8.8.8', rtt=0.002804918)])\n</code></pre></p> create.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.traceroute import Traceroute\n\n\nasync def main(addr: str) -&gt; None:\n    async with Traceroute() as tr:\n        async for info in tr.traceroute(addr, tries=3):\n            print(info)\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>Let's run our asynchronous <code>main()</code> function via <code>asyncio.run</code> and pass the first command-line parameter as the address.</p>"},{"location":"examples/traceroute/#testing","title":"Testing","text":"<p>Run example as:</p> <pre><code>$ sudo examples/traceroute 127.0.0.1\nHopInfo(ttl=1, hops=[Hop(addr='127.0.0.1', rtt=1.5403e-05, asn=0), Hop(addr='127.0.0.1', rtt=1.0747e-05, asn=0), Hop(addr='127.0.0.1', rtt=5.0981e-05, asn=0)])\n</code></pre>"}]}